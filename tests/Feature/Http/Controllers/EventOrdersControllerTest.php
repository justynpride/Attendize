<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventOrdersController
 */
class EventOrdersControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function manage_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showManageOrder', ['order_id' => $order_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.ManageOrder');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_cancel_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postCancelOrder', ['order_id' => $order_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_edit_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postOrderEdit', ['order_id' => $order_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_mark_payment_received_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postMarkPaymentReceived', ['order_id' => $order_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_message_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postMessageOrder', ['event_id' => $event_id, 'order_id' => $order_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function resend_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('resendOrder', ['order_id' => $order_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_cancel_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showCancelOrder', ['order_id' => $order_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.CancelOrder');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_edit_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEditOrder', ['order_id' => $order_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.EditOrder');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_export_orders_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showExportOrders', ['event_id' => $event_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_message_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showMessageOrder', ['event_id' => $event_id, 'order_id' => $order_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.MessageOrder');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_orders_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEventOrders', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Orders');

        // TODO: perform additional assertions
    }

    // test cases...
}
