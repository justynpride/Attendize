<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventAccessCodesController
 */
class EventAccessCodesControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function post_create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postCreateEventAccessCode', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_delete_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $eventAccessCodes = factory(\App\Models\EventAccessCodes::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postDeleteEventAccessCode', ['event_id' => $event_id, 'access_code_id' => $access_code_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEventAccessCodes', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.AccessCodes');
        $response->assertViewHas('event', $event);

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_create_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showCreateEventAccessCode', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.CreateAccessCode');
        $response->assertViewHas('event', $event);

        // TODO: perform additional assertions
    }

    // test cases...
}
