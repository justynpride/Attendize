<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventCheckoutController
 */
class EventCheckoutControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function post_create_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();

        $response = $this->post(route('postCreateOrder', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_validate_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();

        $response = $this->post(route('postValidateOrder', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_validate_tickets_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $ticket = factory(\App\Models\Ticket::class)->create();

        $response = $this->post(route('postValidateTickets', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_event_checkout_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('showEventCheckout', ['event_id' => $event_id]));

        $response->assertRedirect(route($route_name, ['event_id' => $event_id]));

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_event_checkout_payment_return_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $response = $this->get(route('showEventCheckoutPaymentReturn', ['event_id' => $event_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_event_payment_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();

        $response = $this->get(route('showEventPayment', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('Public.ViewEvent.EventPagePayment');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_order_details_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();

        $response = $this->get(route('showOrderDetails', ['order_reference' => $order_reference]));

        $response->assertOk();
        $response->assertViewIs('Public.ViewEvent.Embedded.EventPageViewOrder');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_order_tickets_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $order = factory(\App\Models\Order::class)->create();

        $response = $this->get(route('showOrderTickets', ['order_reference' => $order_reference]));

        $response->assertOk();
        $response->assertViewIs('Public.ViewEvent.Partials.PDFTicket');

        // TODO: perform additional assertions
    }

    // test cases...
}
