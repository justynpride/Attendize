<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventAttendeesController
 */
class EventAttendeesControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function post_cancel_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postCancelAttendee', ['event_id' => $event_id, 'attendee_id' => $attendee_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_edit_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postEditAttendee', ['event_id' => $event_id, 'attendee_id' => $attendee_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_import_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $ticket = factory(\App\Models\Ticket::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postImportAttendee', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_invite_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $ticket = factory(\App\Models\Ticket::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postInviteAttendee', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_message_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postMessageAttendee', ['attendee_id' => $attendee_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_message_attendees_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postMessageAttendees', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_resend_ticket_to_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postResendTicketToAttendee', ['attendee_id' => $attendee_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_attendee_ticket_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showAttendeeTicket', ['event_id' => $event_id, 'attendee_id' => $attendee_id]));

        $response->assertOk();
        $response->assertViewIs('Public.ViewEvent.Partials.PDFTicket');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_attendees_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEventAttendees', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Attendees');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_cancel_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showCancelAttendee', ['event_id' => $event_id, 'attendee_id' => $attendee_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.CancelAttendee');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_edit_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEditAttendee', ['event_id' => $event_id, 'attendee_id' => $attendee_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.EditAttendee');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_export_attendees_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showExportAttendees', ['event_id' => $event_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_export_ticket_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showExportTicket', ['event_id' => $event_id, 'attendee_id' => $attendee_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_import_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showImportAttendee', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.ImportAttendee');
        $response->assertViewHas('event', $event);
        $response->assertViewHas('tickets');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_invite_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showInviteAttendee', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.InviteAttendee');
        $response->assertViewHas('event', $event);
        $response->assertViewHas('tickets');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_message_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showMessageAttendee', ['attendee_id' => $attendee_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.MessageAttendee');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_message_attendees_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showMessageAttendees', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.MessageAttendees');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_print_attendees_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showPrintAttendees', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.PrintAttendees');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_resend_ticket_to_attendee_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $attendee = factory(\App\Models\Attendee::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showResendTicketToAttendee', ['attendee_id' => $attendee_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.ResendTicketToAttendee');

        // TODO: perform additional assertions
    }

    // test cases...
}
