<?php

namespace Tests\Feature\Http\Controllers;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\EventSurveyController
 */
class EventSurveyControllerTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function post_create_event_question_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postCreateEventQuestion', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function postcreateeventquestion_validates_with_a_form_request()
    {
        $this->assertActionUsesFormRequest(
            \App\Http\Controllers\EventSurveyController::class,
            'postCreateEventQuestion',
            \App\Http\Requests\StoreEventQuestionRequest::class
        );
    }

    /**
     * @test
     */
    public function post_delete_event_question_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $question = factory(\App\Models\Question::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postDeleteEventQuestion', ['event_id' => $event_id, 'question_id' => $question_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_edit_event_question_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $question = factory(\App\Models\Question::class)->create();
        $questionType = factory(\App\Models\QuestionType::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postEditEventQuestion', ['event_id' => $event_id, 'question_id' => $question_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_enable_question_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $question = factory(\App\Models\Question::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postEnableQuestion', ['event_id' => $event_id, 'question_id' => $question_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function post_update_questions_order_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $question = factory(\App\Models\Question::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->post(route('postUpdateQuestionsOrder', ['event_id' => $event_id]), [
            // TODO: send request data
        ]);

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_create_event_question_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $questionTypes = factory(\App\Models\QuestionType::class, 3)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showCreateEventQuestion', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.CreateQuestion');
        $response->assertViewHas('event', $event);
        $response->assertViewHas('question_types');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_edit_event_question_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $question = factory(\App\Models\Question::class)->create();
        $event = factory(\App\Models\Event::class)->create();
        $questionTypes = factory(\App\Models\QuestionType::class, 3)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEditEventQuestion', ['event_id' => $event_id, 'question_id' => $question_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.EditQuestion');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_event_question_answers_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $question = factory(\App\Models\Question::class)->create();
        $questionAnswers = factory(\App\Models\QuestionAnswer::class, 3)->create();
        $attendees = factory(\App\Models\Attendee::class, 3)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEventQuestionAnswers', ['event_id' => $event_id, 'question_id' => $question_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Modals.ViewAnswers');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_event_surveys_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showEventSurveys', ['event_id' => $event_id]));

        $response->assertOk();
        $response->assertViewIs('ManageEvent.Surveys');

        // TODO: perform additional assertions
    }

    /**
     * @test
     */
    public function show_export_answers_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $event = factory(\App\Models\Event::class)->create();
        $user = factory(\App\Models\User::class)->create();

        $response = $this->actingAs($user)->get(route('showExportAnswers', ['event_id' => $event_id]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    // test cases...
}
